/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 *
 * * Generated by runing: $ npx openapi-typescript "http://localhost:8000/api/schema/" --output schemas/owaru
 */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      /** @description Retrieve a list of items */
      get: operations["root_list"];
      put?: never;
      post?: never;
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
  };
  "/add/": {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      get?: never;
      put?: never;
      post: operations["add_create"];
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
  };
  "/api/login/access-token": {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      get?: never;
      put?: never;
      /** @description OAuth2 compatible token login, get an access token for future requests. */
      post: operations["login_access_token"];
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
  };
  "/api/schema/": {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
       *
       *     - YAML: application/vnd.oai.openapi
       *     - JSON: application/vnd.oai.openapi+json */
      get: operations["api_schema_retrieve"];
      put?: never;
      post?: never;
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
  };
  "/api/token/refresh/": {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      get?: never;
      put?: never;
      /** @description Takes a refresh type JSON web token and returns an access type JSON web
       *     token if the refresh token is valid. */
      post: operations["api_token_refresh_create"];
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
  };
  "/api/user_info": {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      get: operations["api_user_info_retrieve"];
      put?: never;
      post?: never;
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
  };
  "/bunnies/": {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      get?: never;
      put?: never;
      /** @description Endpoint que ejecuta un modelo y devuelve una matriz de resultados según el parámetro 'Birth Rate'. */
      post: operations["getBunnies"];
      delete?: never;
      options?: never;
      head?: never;
      patch?: never;
      trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
      AuthResponse: {
          user: components["schemas"]["UserInput"];
          token_data: components["schemas"]["Token"];
      };
      BodyLoginRequest: {
          /** Format: email */
          email: string;
          password: string;
      };
      HTTPValidationError: {
          detail: components["schemas"]["ValidationError"][];
      };
      Item: {
          readonly id: number;
          name: string;
          /** Format: date-time */
          readonly created: string;
      };
      Token: {
          access_token: string;
          token_type: string;
      };
      TokenRefresh: {
          readonly access: string;
          refresh: string;
      };
      UserInput: {
          name: string;
          /** Format: email */
          email: string;
          phone: string;
          is_blocked: boolean;
          is_active: boolean;
      };
      ValidationError: {
          loc: string[];
          msg: string;
          type: string;
      };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  root_list: {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      requestBody?: never;
      responses: {
          200: {
              headers: {
                  [name: string]: unknown;
              };
              content: {
                  "application/json": components["schemas"]["Item"][];
              };
          };
      };
  };
  add_create: {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      requestBody: {
          content: {
              "application/json": components["schemas"]["Item"];
              "application/x-www-form-urlencoded": components["schemas"]["Item"];
              "multipart/form-data": components["schemas"]["Item"];
          };
      };
      responses: {
          200: {
              headers: {
                  [name: string]: unknown;
              };
              content: {
                  "application/json": components["schemas"]["Item"];
              };
          };
      };
  };
  login_access_token: {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      requestBody: {
          content: {
              "application/json": components["schemas"]["BodyLoginRequest"];
              "application/x-www-form-urlencoded": components["schemas"]["BodyLoginRequest"];
              "multipart/form-data": components["schemas"]["BodyLoginRequest"];
          };
      };
      responses: {
          200: {
              headers: {
                  [name: string]: unknown;
              };
              content: {
                  "application/json": components["schemas"]["AuthResponse"];
              };
          };
          /** @description Incorrect email or password */
          400: {
              headers: {
                  [name: string]: unknown;
              };
              content?: never;
          };
          /** @description Inactive or blocked user */
          403: {
              headers: {
                  [name: string]: unknown;
              };
              content?: never;
          };
      };
  };
  api_schema_retrieve: {
      parameters: {
          query?: {
              format?: "json" | "yaml";
              lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
          };
          header?: never;
          path?: never;
          cookie?: never;
      };
      requestBody?: never;
      responses: {
          200: {
              headers: {
                  [name: string]: unknown;
              };
              content: {
                  "application/vnd.oai.openapi": {
                      [key: string]: unknown;
                  };
                  "application/yaml": {
                      [key: string]: unknown;
                  };
                  "application/vnd.oai.openapi+json": {
                      [key: string]: unknown;
                  };
                  "application/json": {
                      [key: string]: unknown;
                  };
              };
          };
      };
  };
  api_token_refresh_create: {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      requestBody: {
          content: {
              "application/json": components["schemas"]["TokenRefresh"];
              "application/x-www-form-urlencoded": components["schemas"]["TokenRefresh"];
              "multipart/form-data": components["schemas"]["TokenRefresh"];
          };
      };
      responses: {
          200: {
              headers: {
                  [name: string]: unknown;
              };
              content: {
                  "application/json": components["schemas"]["TokenRefresh"];
              };
          };
      };
  };
  api_user_info_retrieve: {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      requestBody?: never;
      responses: {
          /** @description No response body */
          200: {
              headers: {
                  [name: string]: unknown;
              };
              content?: never;
          };
      };
  };
  getBunnies: {
      parameters: {
          query?: never;
          header?: never;
          path?: never;
          cookie?: never;
      };
      requestBody?: {
          content: {
              "application/json": {
                  /**
                   * @description Tasa de nacimiento
                   * @example 1.5
                   */
                  "Birth Rate": number;
              };
          };
      };
      responses: {
          200: {
              headers: {
                  [name: string]: unknown;
              };
              content: {
                  "application/json": {
                      /** @description Datos de población */
                      Population?: number[];
                      /** @description Fechas de la simulación */
                      index?: string[];
                  };
              };
          };
          /** @description Validation Error */
          400: {
              headers: {
                  [name: string]: unknown;
              };
              content: {
                  "application/json": components["schemas"]["HTTPValidationError"];
              };
          };
      };
  };
}
